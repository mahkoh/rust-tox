#![allow(dead_code)]

/* automatically generated by rust-bindgen */

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_long;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_long;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_long;
pub type int_fast32_t = ::libc::c_long;
pub type int_fast64_t = ::libc::c_long;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_ulong;
pub type uint_fast32_t = ::libc::c_ulong;
pub type uint_fast64_t = ::libc::c_ulong;
pub type intptr_t = ::libc::c_long;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
pub type __gwchar_t = ::libc::c_int;
pub struct imaxdiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
pub type Enum_vpx_img_fmt = ::libc::c_uint;
pub static VPX_IMG_FMT_NONE: ::libc::c_uint = 0;
pub static VPX_IMG_FMT_RGB24: ::libc::c_uint = 1;
pub static VPX_IMG_FMT_RGB32: ::libc::c_uint = 2;
pub static VPX_IMG_FMT_RGB565: ::libc::c_uint = 3;
pub static VPX_IMG_FMT_RGB555: ::libc::c_uint = 4;
pub static VPX_IMG_FMT_UYVY: ::libc::c_uint = 5;
pub static VPX_IMG_FMT_YUY2: ::libc::c_uint = 6;
pub static VPX_IMG_FMT_YVYU: ::libc::c_uint = 7;
pub static VPX_IMG_FMT_BGR24: ::libc::c_uint = 8;
pub static VPX_IMG_FMT_RGB32_LE: ::libc::c_uint = 9;
pub static VPX_IMG_FMT_ARGB: ::libc::c_uint = 10;
pub static VPX_IMG_FMT_ARGB_LE: ::libc::c_uint = 11;
pub static VPX_IMG_FMT_RGB565_LE: ::libc::c_uint = 12;
pub static VPX_IMG_FMT_RGB555_LE: ::libc::c_uint = 13;
pub static VPX_IMG_FMT_YV12: ::libc::c_uint = 769;
pub static VPX_IMG_FMT_I420: ::libc::c_uint = 258;
pub static VPX_IMG_FMT_VPXYV12: ::libc::c_uint = 771;
pub static VPX_IMG_FMT_VPXI420: ::libc::c_uint = 260;
pub static VPX_IMG_FMT_I422: ::libc::c_uint = 261;
pub static VPX_IMG_FMT_I444: ::libc::c_uint = 262;
pub static VPX_IMG_FMT_444A: ::libc::c_uint = 1287;
pub type vpx_img_fmt_t = Enum_vpx_img_fmt;
pub struct Struct_vpx_image {
    pub fmt: vpx_img_fmt_t,
    pub w: ::libc::c_uint,
    pub h: ::libc::c_uint,
    pub d_w: ::libc::c_uint,
    pub d_h: ::libc::c_uint,
    pub x_chroma_shift: ::libc::c_uint,
    pub y_chroma_shift: ::libc::c_uint,
    pub planes: [*mut ::libc::c_uchar, ..4u],
    pub stride: [::libc::c_int, ..4u],
    pub bps: ::libc::c_int,
    pub user_priv: *mut ::libc::c_void,
    pub img_data: *mut ::libc::c_uchar,
    pub img_data_owner: ::libc::c_int,
    pub self_allocd: ::libc::c_int,
}
pub type vpx_image_t = Struct_vpx_image;
pub struct Struct_vpx_image_rect {
    pub x: ::libc::c_uint,
    pub y: ::libc::c_uint,
    pub w: ::libc::c_uint,
    pub h: ::libc::c_uint,
}
pub type vpx_image_rect_t = Struct_vpx_image_rect;
pub type ToxAVCallback =
    ::std::option::Option<extern "C" fn
                              (arg1: int32_t, arg2: *mut ::libc::c_void)>;
pub enum Struct__ToxAv { }
pub type ToxAv = Struct__ToxAv;
pub enum Struct_Tox { }
pub type Tox = Struct_Tox;
pub type ToxAvCallbackID = ::libc::c_uint;
pub static av_OnInvite: ::libc::c_uint = 0;
pub static av_OnStart: ::libc::c_uint = 1;
pub static av_OnCancel: ::libc::c_uint = 2;
pub static av_OnReject: ::libc::c_uint = 3;
pub static av_OnEnd: ::libc::c_uint = 4;
pub static av_OnRinging: ::libc::c_uint = 5;
pub static av_OnStarting: ::libc::c_uint = 6;
pub static av_OnEnding: ::libc::c_uint = 7;
pub static av_OnError: ::libc::c_uint = 8;
pub static av_OnRequestTimeout: ::libc::c_uint = 9;
pub static av_OnPeerTimeout: ::libc::c_uint = 10;
pub type ToxAvCallType = ::libc::c_uint;
pub static TypeAudio: ::libc::c_uint = 192;
pub static TypeVideo: ::libc::c_uint = 193;
pub type ToxAvError = ::libc::c_int;
pub static ErrorNone: ::libc::c_int = 0;
pub static ErrorInternal: ::libc::c_int = -1;
pub static ErrorAlreadyInCall: ::libc::c_int = -2;
pub static ErrorNoCall: ::libc::c_int = -3;
pub static ErrorInvalidState: ::libc::c_int = -4;
pub static ErrorNoRtpSession: ::libc::c_int = -5;
pub static ErrorAudioPacketLost: ::libc::c_int = -6;
pub static ErrorStartingAudioRtp: ::libc::c_int = -7;
pub static ErrorStartingVideoRtp: ::libc::c_int = -8;
pub static ErrorTerminatingAudioRtp: ::libc::c_int = -9;
pub static ErrorTerminatingVideoRtp: ::libc::c_int = -10;
pub static ErrorPacketTooLarge: ::libc::c_int = -11;
pub type ToxAvCapabilities = ::libc::c_uint;
pub static AudioEncoding: ::libc::c_uint = 1;
pub static AudioDecoding: ::libc::c_uint = 2;
pub static VideoEncoding: ::libc::c_uint = 4;
pub static VideoDecoding: ::libc::c_uint = 8;
pub struct Struct__ToxAvCodecSettings {
    pub video_bitrate: uint32_t,
    pub video_width: uint16_t,
    pub video_height: uint16_t,
    pub audio_bitrate: uint32_t,
    pub audio_frame_duration: uint16_t,
    pub audio_sample_rate: uint32_t,
    pub audio_channels: uint32_t,
    pub jbuf_capacity: uint32_t,
}
pub type ToxAvCodecSettings = Struct__ToxAvCodecSettings;
#[link(name = "toxcore")]
extern "C" {
    pub static av_DefaultSettings: ToxAvCodecSettings;
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *::libc::c_char,
                     __endptr: *mut *mut ::libc::c_char,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *__gwchar_t, __endptr: *mut *mut __gwchar_t,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn wcstoumax(__nptr: *__gwchar_t, __endptr: *mut *mut __gwchar_t,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn vpx_img_alloc(img: *mut vpx_image_t, fmt: vpx_img_fmt_t,
                         d_w: ::libc::c_uint, d_h: ::libc::c_uint,
                         align: ::libc::c_uint) -> *mut vpx_image_t;
    pub fn vpx_img_wrap(img: *mut vpx_image_t, fmt: vpx_img_fmt_t,
                        d_w: ::libc::c_uint, d_h: ::libc::c_uint,
                        align: ::libc::c_uint, img_data: *mut ::libc::c_uchar)
     -> *mut vpx_image_t;
    pub fn vpx_img_set_rect(img: *mut vpx_image_t, x: ::libc::c_uint,
                            y: ::libc::c_uint, w: ::libc::c_uint,
                            h: ::libc::c_uint) -> ::libc::c_int;
    pub fn vpx_img_flip(img: *mut vpx_image_t);
    pub fn vpx_img_free(img: *mut vpx_image_t);
    pub fn toxav_new(messenger: *mut Tox, max_calls: int32_t) -> *mut ToxAv;
    pub fn toxav_kill(av: *mut ToxAv);
    pub fn toxav_register_callstate_callback(callback: ToxAVCallback,
                                             id: ToxAvCallbackID,
                                             userdata: *mut ::libc::c_void);
    pub fn toxav_call(av: *mut ToxAv, call_index: *mut int32_t,
                      user: ::libc::c_int, call_type: ToxAvCallType,
                      ringing_seconds: ::libc::c_int) -> ::libc::c_int;
    pub fn toxav_hangup(av: *mut ToxAv, call_index: int32_t) -> ::libc::c_int;
    pub fn toxav_answer(av: *mut ToxAv, call_index: int32_t,
                        call_type: ToxAvCallType) -> ::libc::c_int;
    pub fn toxav_reject(av: *mut ToxAv, call_index: int32_t,
                        reason: *::libc::c_char) -> ::libc::c_int;
    pub fn toxav_cancel(av: *mut ToxAv, call_index: int32_t,
                        peer_id: ::libc::c_int, reason: *::libc::c_char) ->
     ::libc::c_int;
    pub fn toxav_stop_call(av: *mut ToxAv, call_index: int32_t) ->
     ::libc::c_int;
    pub fn toxav_prepare_transmission(av: *mut ToxAv, call_index: int32_t,
                                      codec_settings: *mut ToxAvCodecSettings,
                                      support_video: ::libc::c_int) ->
     ::libc::c_int;
    pub fn toxav_kill_transmission(av: *mut ToxAv, call_index: int32_t) ->
     ::libc::c_int;
    pub fn toxav_recv_video(av: *mut ToxAv, call_index: int32_t,
                            output: *mut *mut vpx_image_t) -> ::libc::c_int;
    pub fn toxav_recv_audio(av: *mut ToxAv, call_index: int32_t,
                            frame_size: ::libc::c_int, dest: *mut int16_t) ->
     ::libc::c_int;
    pub fn toxav_send_video(av: *mut ToxAv, call_index: int32_t,
                            frame: *uint8_t, frame_size: ::libc::c_int) ->
     ::libc::c_int;
    pub fn toxav_send_audio(av: *mut ToxAv, call_index: int32_t,
                            frame: *uint8_t, frame_size: ::libc::c_int) ->
     ::libc::c_int;
    pub fn toxav_prepare_video_frame(av: *mut ToxAv, call_index: int32_t,
                                     dest: *mut uint8_t,
                                     dest_max: ::libc::c_int,
                                     input: *mut vpx_image_t) ->
     ::libc::c_int;
    pub fn toxav_prepare_audio_frame(av: *mut ToxAv, call_index: int32_t,
                                     dest: *mut uint8_t,
                                     dest_max: ::libc::c_int, frame: *int16_t,
                                     frame_size: ::libc::c_int) ->
     ::libc::c_int;
    pub fn toxav_get_peer_transmission_type(av: *mut ToxAv,
                                            call_index: int32_t,
                                            peer: ::libc::c_int) ->
     ::libc::c_int;
    pub fn toxav_get_peer_id(av: *mut ToxAv, call_index: int32_t,
                             peer: ::libc::c_int) -> ::libc::c_int;
    pub fn toxav_capability_supported(av: *mut ToxAv, call_index: int32_t,
                                      capability: ToxAvCapabilities) ->
     ::libc::c_int;
    pub fn toxav_set_audio_queue_limit(av: *mut ToxAv, call_index: int32_t,
                                       limit: uint64_t) -> ::libc::c_int;
    pub fn toxav_set_video_queue_limit(av: *mut ToxAv, call_index: int32_t,
                                       limit: uint64_t) -> ::libc::c_int;
    pub fn toxav_get_tox(av: *mut ToxAv) -> *mut Tox;
}
